// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserType {
  CREATOR
  INVESTOR
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  username        String?   @unique
  backgroundImage String?
  image           String?
  createdAt       DateTime  @default(now())
  type            UserType? @default(CREATOR)
  about           String?
  location        String?
  website         String?
  bio             String?
  aboutContent    Json?

  createdProjects Project[] @relation("CreatedBy")

  subscriptions Subscription[]
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  comments      Comment[]
  commentVote   CommentVote[]
  votes         Vote[]
  contributions contribution[]

  investmentSummaryId String?
  ProjectTeam         ProjectTeam[]
}

enum ProjectType {
  PUBLIC
  PRIVATE
}

model Tags {
  id       String           @id @default(cuid())
  name     String           @unique
  projects TagsOnProjects[]
}

model TagsOnProjects {
  tags      Tags    @relation(fields: [tagsId], references: [id])
  tagsId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@id([tagsId, projectId])
  @@index([tagsId])
  @@index([projectId])
}

model InvestmentSummary {
  id           String  @id @default(cuid())
  totalFunding Float?
  project      Project @relation(fields: [projectId], references: [id])
  projectId    String  @unique
}

model ProjectTeam {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  assignedAt DateTime @default(now())

  @@id([userId, projectId])
  @@index([projectId])
  @@index([userId])
}

model ProjectDocument {
  id        String   @id @default(cuid())
  name      String
  url       String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String

  @@index([projectId])
}

model Project {
  id              String  @id @default(cuid())
  name            String  @unique
  description     String?
  image           String?
  backgroundImage String?

  idea              String?            @default("")
  keyInformation    String?            @default("")
  documents         ProjectDocument[]
  website           String?
  location          String?
  socialLinks       Json?
  companyNumber     String?
  legalName         String?
  ventureType       String?
  investmentSummary InvestmentSummary?
  industryTags      TagsOnProjects[]
  contact           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts       Post[]
  subscribers Subscription[]
  type        ProjectType    @default(PUBLIC)
  creator     User           @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId   String

  contributors contribution[]
  projectTeam  ProjectTeam[]

  @@index([name])
  @@index([creatorId])
}

enum PostType {
  DEFAULT
  PERSONAL
  PROJECT_UPDATE
  PROJECT_DISCUSSION
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String

  author   User      @relation(fields: [authorId], references: [id])
  authorId String
  comments Comment[]
  votes    Vote[]

  type PostType? @default(DEFAULT)

  @@index([authorId])
  @@index([projectId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  replytoId String?
  replyto   Comment?  @relation("ReplyTo", fields: [replytoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?

  @@index([postId])
  @@index([authorId])
  @@index([replytoId])
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id])
  postId String
  type   VoteType

  @@id([userId, postId])
  @@index([postId])
  @@index([userId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  type      VoteType

  @@id([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model Subscription {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String

  @@id([userId, projectId])
  @@index([projectId])
  @@index([userId])
}

model contribution {
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id])
  project               Project  @relation(fields: [projectId], references: [id])
  numberOfContributions Int      @default(0)

  userId    String
  projectId String

  @@id([userId, projectId])
  @@index([projectId])
  @@index([userId])
}
